version: '3.9'

volumes:
  postgres_data:

services:

  account:
    build: ./account
    container_name: go_rabbit__account
    restart: always
    ports:
      - ${SERVICE_ACCOUNT_PORT}:${SERVICE_ACCOUNT_PORT}
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - SERVICE_ACCOUNT_PORT=${SERVICE_ACCOUNT_PORT}
      - SECRET_KEY=${SERVICE_ACCOUNT_SECRET_KEY}
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: go_rabbit__rabbitmq
    ports:
      - 5672:5672
      - 15672:15672

  postgres:
    image: postgres:latest
    container_name: go_rabbit__postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 120

  application-migrate:
    build: ./configs/application-migrate
    container_name: go_rabbit__migrate
    environment:
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
